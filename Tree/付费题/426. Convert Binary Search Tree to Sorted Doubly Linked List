// 付费题
/*
Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.

 

Example 1:



Input: root = [4,2,5,1,3]


Output: [1,2,3,4,5]

Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.

Example 2:

Input: root = [2,1,3]
Output: [1,2,3]
Example 3:

Input: root = []
Output: []
Explanation: Input is an empty tree. Output is also an empty Linked List.
Example 4:

Input: root = [1]
Output: [1]
 

Constraints:

-1000 <= Node.val <= 1000
Node.left.val < Node.val < Node.right.val
All values of Node.val are unique.
0 <= Number of Nodes <= 2000
*/

// 这道题的描述可谓是非常不清楚。返回Node？后来我才自己领悟，是把TreeNode当成是双向链表，left表示pre，right表示next。
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/

// 这里特别需要注意赋值的先后顺序，比如先连接pre和node，再改变pre和node的值。同时要考虑到pre是null的情况。
// 这种方法之所以行得通，不会造成死循环，是因为，pre永远都是已经从stack里面pop出来了的。而node也是pop出来了，node的left永远不会再被放进stack里面。

class Solution {
    public Node treeToDoublyList(Node root) {
        if (root == null) return null;
        Stack<Node> stack = new Stack<>();
        Node pre = null, head = null, node = root;
        while (!stack.isEmpty() || node != null) {
            if (node != null) {
                stack.push(node);
                node = node.left;
            } else {
                node = stack.pop();
                if (head == null) head = node;
                node.left = pre;
                if (pre != null) {
                    pre.right = node;
                }
                pre = node;
                node = node.right;
            }
        }
        // 这里特别注意是pre而不是node。循环跳出来，node必然是null，pre是最后一个值。
        pre.right = head;
        head.left = pre;
        return head;
    }
}


