// 付费题, 经典例题，binary search tree如何进行binary search

/*

Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4
*/

// 我想了一会儿后的解法. 核心就是，左边永远比root 更小，如果root已经比target小，更小的diff肯定更大，不需要查看。右边同理。
class Solution {
        
    public int closestValue(TreeNode root, double target) {
        // root is not null
        return binarySearch(root, target, root.val, Math.abs(root.val - target));
    }
    
    private int binarySearch(TreeNode root, double target, int val, double diff) {
        if (root == null) return val;
        if (root.val == target) return root.val;
        double newDiff = Math.abs(root.val - target);
        if (newDiff < diff) {
            val = root.val;
            diff = newDiff;
        }
        if (root.val > target) return binarySearch(root.left, target, val, diff);
        return binarySearch(root.right, target, val, diff);
    }
}

// 其实，如果只需要走一条线，而不需要DFS，就不需要有新的方法。因为不需要回溯，不需要stack。
class Solution {   
    public int closestValue(TreeNode root, double target) {
        int val = root.val;
        double diff = Math.abs(root.val - target);
        
        while (root != null) {
            if (root.val == target) return root.val;
            double newDiff = Math.abs(root.val - target);
            if (newDiff < diff) {
                val = root.val;
                diff = newDiff;
            }
            if (root.val > target) root = root.left;
            else root = root.right;
        }
        return val;
    }
}