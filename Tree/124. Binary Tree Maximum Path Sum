// 第一次做很难想思路。难点在两个地方，第一是如何处理负数的情况，第二是主要方法的返回值和help 方法的返回值表达的意义的区别要弄清楚。
// 解决第一个难点，其实很简单，就是跟数组一样，树的很多题目，想不明白的时候，就想成是数组，就会简单点。一个数组，要你找和最大的subarray，怎么找？就是双指针，从左往右，当加到某个index i，和为负数，果断扔掉，因为不可能带来任何正收益。树也是同理，如果某一个从leaf到上面node的path，是负数，果断丢掉，因为不可能使得path和更大，只会拖后腿。
// 解决第二个难点，我们要的是path，不一定经过root的和。但是如果要bottom up的做，则必须返回每一个子树root的结果，怎么处理呢？就是加一个额外的全局变量，用来存这个返回值。而help的返回则不是题目需要返回的，而是计算需要用到的。

class Solution {
    
    private int maxSum;
    
    // return maxPathSum
    public int maxPathSum(TreeNode root) {
        this.maxSum = Integer.MIN_VALUE;
        help(root);
        return maxSum;
    }
    
    // return max child root to leaf (may cut at middle) sum
    private int help(TreeNode root) {
        if (root == null) return 0;
        // 注意特性， left 和 right，必定大于等于0，这一点可以省去很多不必要的判断。
        int left = help(root.left);
        int right = help(root.right);
        
        maxSum = Math.max(maxSum, left+right+root.val);
        int max = Math.max(left, right) + root.val;
        return max > 0 ? max : 0;
    }
}