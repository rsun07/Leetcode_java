// 很经典的一道题，只要有inorder 结果和任意另一个traversal的结果，就可以得到一个唯一的tree。不过题目有一个限制，就是tree node不能有重复
// 原理很简单，按照pre order来复原tree，inorder告诉你，左边几个，右边几个。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int preorderIndex;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> inorderValToIndex = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderValToIndex.put(inorder[i], i);
        }
        this.preorderIndex = 0;
        return buildTree(preorder, inorder, inorderValToIndex, 0, inorder.length-1);
    }
    
    private TreeNode buildTree(int[] preorder, int[] inorder, Map<Integer, Integer> inorderValToIndex, int lo, int hi) {
        if (lo > hi) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[preorderIndex++]);
        int inorderIndex = inorderValToIndex.get(root.val);
        root.left = buildTree(preorder, inorder, inorderValToIndex, lo, inorderIndex-1);
        root.right = buildTree(preorder, inorder, inorderValToIndex, inorderIndex+1, hi);
        return root;
    }
}