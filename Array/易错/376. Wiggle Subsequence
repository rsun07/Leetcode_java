// 
/*

一开始就看错了题目，以为是一定要相邻的，中间不可以跳过。导致了解法出了问题。
一定要看清楚题目，多看例子。然后举一些自己的例子，举一些边界调节，确保自己理解。

这个解法，先算出来了差值，然后再去算，很容易出错，怎么修改都很容易出错。
注意以下这些例子，这些边界调节，都是要拿出来测试的。
[1, 1, 1]
[1,1,1,3,5,2]
[21]
[1,2]
[1,2,3]
[1,3,2]
*/

class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length < 2) {
            return nums.length;
        }
        
        long[] diffs = new long[nums.length-1];
        for (int i = 1; i < nums.length; i++) {
            diffs[i-1] = (long)nums[i] - (long)nums[i-1];
        }
        
        int[] counts = new int[diffs.length];
        for (int i = 0; i < diffs.length; i++) {
            if (diffs[i] != 0) {
                counts[i] = 2;
            } else {
                counts[i] = 1;
            }
        }
        
        int maxLen = counts[0];
        
        for (int i = 1; i < diffs.length; i++) {
            if (diffs[i] > 0 && diffs[i-1] < 0 || diffs[i] < 0 && diffs[i-1] > 0) {
                counts[i] = Math.max(counts[i-1] + 1, counts[i] + 1);
            } else {
                counts[i] = counts[i-1];
            }
            maxLen = Math.max(maxLen, counts[i]);
        }
        return maxLen;
    }
}



class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length < 2) {
            return nums.length;
        }
        
        int pre = nums[0], maxLen = 1;
        Boolean prePos = null;
        for (int i = 1; i < nums.length; i++) {
            // don't use nums[i] - nums[i-1] > 0; Overflow may happen
            if (nums[i] > nums[i-1]) {
                if (prePos == null || prePos == false) {
                    prePos = true;
                    maxLen++;
                }
            }  else if (nums[i] < nums[i-1]) {
                if (prePos == null || prePos == true) {
                    prePos = false;
                    maxLen++;
                }
            }
        }
        return maxLen;
    }
}