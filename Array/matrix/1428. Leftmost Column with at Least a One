// 付费题目
/*
(This problem is an interactive problem.)

A row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.

Given a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.

You can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:

BinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed).
BinaryMatrix.dimensions() returns the dimensions of the matrix as a list of 2 elements [rows, cols], which means the matrix is rows x cols.
Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix mat. You will not have access to the binary matrix directly.

*/

// 注意，没有讲column是如何排列的。

// 我想到每一行用binary search做。并且优化了一下，就是下一行只从上一行结果开始往右边找。
/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface BinaryMatrix {
 *     public int get(int row, int col) {}
 *     public List<Integer> dimensions {}
 * };
 */

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        int n = binaryMatrix.dimensions().get(0);
        int m = binaryMatrix.dimensions().get(1);
        int res = m;
        for (int i = 0; i < n; i++) {
            if (res < m) {
                if (binaryMatrix.get(i, res) == 0) continue;
            }
            int lo = 0, hi = res == m ? m-1 : res;
            while (lo <= hi) {
                int mid = lo + (hi-lo)/2;
                if (binaryMatrix.get(i, mid) == 1) {
                    res = mid;
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            }
        }
        return res == m ? -1 : res;
    }
}


// LC答案里面，有一个种解法很奇特. 号称只需要 O(N+M) 的复杂度。因为它从最右上角开始，最多是横着走一遍，竖着走一遍。
// 跟我上面那个解法相比，我觉得我上面的要分场合，可能比他更快。我觉得按照他的逻辑，我的时间复杂度可以写成O(N+lgM)? 好像还是不行，想一想最差的情况，就是每一行比上一行多一个1，这种需要lg1 + lg2 + lg3 + lg4 +..lgM, 还是MlgMM

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        int rows = binaryMatrix.dimensions().get(0);
        int cols = binaryMatrix.dimensions().get(1);

        // Set pointers to the top-right corner.
        int currentRow = 0;
        int currentCol = cols - 1;
    
        // Repeat the search until it goes off the grid.
        while (currentRow < rows && currentCol >= 0) {
            if (binaryMatrix.get(currentRow, currentCol) == 0) {
                currentRow++;
            } else {
                currentCol--; 
            }
        }
    
        // If we never left the last column, this is because it was all 0's.
        return (currentCol == cols - 1) ? -1 : currentCol + 1;
    }
}
