// 付费题目
/*
Given two sparse vectors, compute their dot product.

Implement class SparseVector:

SparseVector(nums) Initializes the object with the vector nums
dotProduct(vec) Compute the dot product between the instance of SparseVector and vec
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.

Follow up: What if only one of the vectors is sparse?

 

Example 1:

Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8
Example 2:

Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
Output: 0
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0
Example 3:

Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
Output: 6
 

Constraints:

n == nums1.length == nums2.length
1 <= n <= 10^5
0 <= nums1[i], nums2[i] <= 100

*/

// 很容易想到用HashMap做，但是有一个人在低下评论说，他在2020年面试FB，问到这个题目，面试官说HashMap不可以，因为会很慢。所以用下面这个办法做。因为index是有序的，不需要用Map无序算hash这样浪费时间。
class SparseVector {
    
    private List<int[]> pairs;
    
    SparseVector(int[] nums) {
        this.pairs = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                pairs.add(new int[]{i, nums[i]});
            }
        }
    }
    
    public List<int[]> getPairs() {
        return pairs;
    }
    
    // Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        int res = 0;
        List<int[]> pairs2 = vec.getPairs();
        int i1 = 0, i2 = 0;
        while (i1 < pairs.size() && i2 < pairs2.size()) {
            int index1 = pairs.get(i1)[0], index2 = pairs2.get(i2)[0];
            if (index1 == index2) {
                res += pairs.get(i1)[1] * pairs2.get(i2)[1];
                i1++; 
                i2++;
            } else if (index1 < index2) {
                i1++;
            } else {
                i2++;
            }
        }
        
        return res;
    }
}

// Your SparseVector object will be instantiated and called as such:
// SparseVector v1 = new SparseVector(nums1);
// SparseVector v2 = new SparseVector(nums2);
// int ans = v1.dotProduct(v2);