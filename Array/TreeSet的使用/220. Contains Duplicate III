
// 没有考虑溢出
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    	if (nums == null || nums.length == 0) return false;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(nums[0]);
        for (int i = 1; i < nums.length; i++) {
        	if (i > k) queue.poll();
        	for (int num : queue) {
        		if (Math.abs(num - nums[i]) <= t) return true;
        	}
        	queue.offer(nums[i]);
        }
        return false;
    }
}

// 会超时, 如果input很长很长
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    	if (nums == null || nums.length == 0) return false;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(nums[0]);
        for (int i = 1; i < nums.length; i++) {
        	if (i > k) queue.poll();
        	for (int num : queue) {
        		if (Math.abs((long)num - nums[i]) <= t) return true;
        	}
        	queue.offer(nums[i]);
        }
        return false;
    }
}

//超时
/*

[2147483647,-1,2147483647]
1
2147483647

*/
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0) return false;
        Set<Long> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            // nums[i] +/- t may overflow
            long num = (long) nums[i];
            for (long target = num - t; target <= num + t; target++) {
                if (set.contains(target)) {
                    return true;
                }
            }
            set.add(num);
            if (i >= k) {
                set.remove((long)nums[i-k]);
            }
        }
        return false;
    }
}

//TreeSet解法
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0) return false;
        TreeSet<Long> tree = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            // nums[i] +/- t may overflow
            long num = (long) nums[i], lowerBound = num - t, upperBound = num + t;
            Long floor = tree.floor(upperBound);
            Long ceiling = tree.ceiling(lowerBound);
            if (floor != null && floor >= lowerBound || ceiling != null && ceiling <= upperBound) {
                return true;
            }
                
            tree.add(num);
            if (i >= k) {
                tree.remove((long)nums[i-k]);
            }
        }
        return false;
    }
}