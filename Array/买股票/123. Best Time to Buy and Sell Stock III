// 错误的答案，可能会交易三次甚至更多次。DP里只能存至多一次交易的最大值。

class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int[] maxProfits = new int[prices.length];
        for (int i = 1; i < prices.length; i++) {
            maxProfits[i] = Math.max(0, prices[i] - prices[0]);
            // 这里取j == i, 意思就是不交易，取前值
            for (int j = 1; j <= i; j++) {
                int maxProfit = maxProfits[j-1] + Math.max(0, prices[i] - prices[j]);
                maxProfits[i] = Math.max(maxProfits[i], maxProfit);
                if (i == 7) {
                    System.out.println(i + "  " + j + "  " + maxProfit + "  " + maxProfits[i]);
                }
            }
            // 容易漏掉。上面用j <= i, 一样的道理
            // maxProfits[i] = Math.max(maxProfits[i], maxProfits[i-1]);
        }
        System.out.println(Arrays.toString(maxProfits));
        return maxProfits[prices.length-1];
    }
}


// 解法应该是过关的，就是超时了。可以通过206个test case
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int maxProfit = 0;
        int[] maxProfits = new int[prices.length];
        for (int i = 1; i < prices.length; i++) {
            maxProfits[i] = Math.max(0, prices[i] - prices[0]);
            maxProfit = Math.max(maxProfit, prices[i] - prices[0]);
            for (int j = 1; j < i; j++) {
                maxProfit = Math.max(maxProfit, maxProfits[j-1] + prices[i] - prices[j]);
                maxProfits[i] = Math.max(maxProfits[i], prices[i] - prices[j]);
            }
            // 这一行要特别注意，这一行少了会出错。[3,2,6,5,0,3]。因为第二次交易可以是第十天减去第八天，而第一次交易不一定要是第七天，可以是第五天减去第三天。
            maxProfits[i] = Math.max(maxProfits[i], maxProfits[i-1]);
        }
        return maxProfit;
    }
}

// 双向的DP做，就只需要O(n), 上面那个是n平方
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int min = prices[0];
        // left的实际意义是，卖在i天，买在i之前的低点的某一天。
        int[] left = new int[prices.length];
        for (int i = 1; i < prices.length; i++) {
            left[i] = Math.max(left[i-1], prices[i] - min);
            min = Math.min(min, prices[i]);
        }
        int max = prices[prices.length-1];
        int[] right = new int[prices.length];
        // right 的实际意义是，买在i天，卖在i之后的某一天，高点。
        for (int i = prices.length - 2; i >= 0; i--) {
            right[i] = Math.max(right[i+1], max - prices[i]);
            max = Math.max(max, prices[i]);
        }
        int maxProfit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            maxProfit = Math.max(maxProfit, left[i] + right[i+1]);
        }
        // 易错点，上面会漏掉，例子[1,2,3,4,5]
        return Math.max(maxProfit, prices[prices.length-1] - prices[0]);
    }
}

// 其实上面的方法有点，出了错，临时补救。实际上，最后几行应该这样写，来避免易错点。
/*
        // 因为下面的for 循环会漏掉right 0， 也就是在0买，在日后的高点卖。如果不是卖在最后一天，则left[i]都可以cover，唯独卖在最后一天，left[prices.length - 1] 也被排除在外了。
        int maxProfit = Math.max(left[prices.length-1], right[0]);
        for (int i = 0; i < prices.length - 1; i++) {
            maxProfit = Math.max(maxProfit, left[i] + right[i+1]);
        }
        // 易错点，上面会漏掉，例子[1,2,3,4,5]
        return maxProfit;
*/


// 还有一种O(1) space的解法，但是直觉上很难理解
class Solution {
  public int maxProfit(int[] prices) {
    int t1Cost = Integer.MAX_VALUE, 
        t2Cost = Integer.MAX_VALUE;
    int t1Profit = 0,
        t2Profit = 0;

    for (int price : prices) {
        // the maximum profit if only one transaction is allowed
        t1Cost = Math.min(t1Cost, price);
        t1Profit = Math.max(t1Profit, price - t1Cost);
        // reinvest the gained profit in the second transaction
        t2Cost = Math.min(t2Cost, price - t1Profit);
        t2Profit = Math.max(t2Profit, price - t2Cost);
    }

    return t2Profit;
  }
}
