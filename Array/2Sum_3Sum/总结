整个系列，可以有2Sum, 3Sum，4Sum。还有变种题目，如3Sum Similar，3Sum Closest.

总的来说，方法都是相通的。注意题目让你返回数字、index，还是什么，一定要看清楚题目。多看两遍。
3Sum以后，因为至少要n^2 的时间复杂度，所以可以先排序，再来做。
2Sum解法很多，最优解法是用一个HashSet，把遍历过的数值都记下来，然后看现在所在的值是否能够符合条件。

3Sum则是排序后，固定一个数字，然后用双指针扫。特别要注意去重的问题。3Sum的变体，其实也是类似的方法做。
LC的答案里面，给出了3Sum不排序的解法，其实跟2Sum类似，固定一个值以后的2Sum。要特别注意重复的问题，很可能会有重复。需要先存一个Set<List<Integer>> 查重，最后再把答案转换成List<List<Integer>>。

这里我特意试了一下，Java List的equals。下面会返回ture的。

        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        List<Integer> list2 = Arrays.asList(2, 1,3);
        Collections.sort(list2);
        
        System.out.println(list.equals(list2));



4Sum，没什么好办法，就是n^3，包两层for loop最里面双指针。

