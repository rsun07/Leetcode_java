// 付费题目

/*

Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Follow up: Could you solve it in O(n2) runtime?

 

Example 1:

Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]
Example 2:

Input: nums = [], target = 0
Output: 0
Example 3:

Input: nums = [0], target = 0
Output: 0
 

Constraints:

n == nums.length
0 <= n <= 300
-100 <= nums[i] <= 100
-100 <= target <= 100

*/

/*
审题，这里就不能习惯思维，3Sum，先sort。人家明确叫你找i j k 是从小到大分布的，是index。所以不能sort。
这题看似很简单，就是固定一个数字，然后双指针。注意，不能sort，无法双指针找。应该是要用到2Sum的Set的方法，因为这里没有让去重，反而重复的也要计入count，所以就是这样解题的。
*/


// 解法一，错了，理解错了题目的意思。题目是要小于target，而我这里是等于target且 i < j < k
// 意识到这是一道DP题目。要一个最后count多少个的问题，八成都是DP题目
class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if (nums == null || nums.length < 3) {
            return 0;
        }
        int count = 0;
        // 0, 1, 2, 3 (length 4)
        for (int i = 0; i <= nums.length - 3; i++) {
            Map<Integer, Integer> numToCount = new HashMap<>();
            int newTarget = target - nums[i];
            for (int j = i+1; j < nums.length; j++) {
                int num = newTarget - nums[j];
                if (numToCount.containsKey(num)) {
                    count += numToCount.get(num);
                }
                numToCount.put(nums[j], numToCount.getOrDefault(nums[j], 0) + 1);
            }
        }
        return count;
    }
}

// 仔细想，DP也不对劲。因为一直DP[i-1], 对DP[i] 帮助不大，无法利用好。我在想，可能是要遍历两次，每次都是n^2, 第一次先构造一定的数据结构，让第二次可以不用n^3 解决问题。

// 看了答案以后，发现我被 0 <= i < j < k < n 骗了。这个的意思只是告诉你，三个index不能相同。做题的过程中并不一定要维持这个i,j,k 的顺序。有一个人也是被骗了，问了问题。我才意识到，因为是nums[i] + nums[j] + nums[k] < target，不论你是i,j,k还是j,i,k 还是k,j,i。加和的结果都是一样的，没有任何区别。。。

class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if (nums == null || nums.length < 3) {
            return 0;
        }
        int count = 0;
        Arrays.sort(nums);
        // 0, 1, 2 (length is 3)
        for (int i = 0; i <= nums.length - 3; i++) {
            int lo = i+1, hi = nums.length - 1;
            int newTarget = target - nums[i];
            while (lo < hi) {
                if (nums[lo] + nums[hi] < newTarget) {
                	// 这里非常容易出错。因为如果更大的hi都满足，则比hi小的全部都可以满足，所以需要加上hi-lo. 也可以举例子比划比划。
                	// 这里如果写成count++, 则很可能漏掉。
                    count += hi-lo;
                    // 因为更小了，所以下一个要试试更大的
                    lo++;
                } else {
                    hi--;
                }
            }
        }
        return count;
    }
}

