// 这道题很有迷惑性，首先就是要搞清楚，subarray和subsequence的区别。其次要注意，如果nums[i] == nums[i-1]的情况，不能算。还有就是容易想多，最好还是带着例子手动过一遍，看看如果你手动作会怎么做，就很容易找出方法。

class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return 1;
        } 
        int count = 1, preNum = nums[0];
        Boolean pos = null;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i-1]) {
                continue;
            }
            if (pos == null) {
                count++;
                pos = nums[i] > nums[i-1];
            } else if (pos) {
                if (nums[i] < nums[i-1]) {
                    count++;
                    pos = false;
                }
            } else {
                if (nums[i] > nums[i-1]) {
                    count++;
                    pos = true;
                }
            }
            preNum = nums[i];
        }
        return count;
    }
}

// 简化后
class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int count = 1;
        Boolean pos = null;
        for (int i = 1; i < nums.length; i++) {
            // 特别注意，这一行不能去掉，下面一种结果就是错的
            if (nums[i] == nums[i-1]) {
                continue;
            }
            if (pos == null) {
                count++;
                pos = nums[i] > nums[i-1];
            } else if (pos && nums[i] < nums[i-1] || !pos && nums[i] > nums[i-1]) {
                count++;
                pos = !pos;
            }
        }
        return count;
    }
}

// 错误的结果，if else的简化要特别注意，尤其是else if，if里面有&&。
class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int count = 1;
        Boolean pos = null;
        for (int i = 1; i < nums.length; i++) {
            if (pos == null && nums[i] != nums[i-1]) {
                count++;
                pos = nums[i] > nums[i-1];
            } else if (pos && nums[i] < nums[i-1] || !pos && nums[i] > nums[i-1]) {
                count++;
                pos = !pos;
            }
        }
        return count;
    }
}