// Sub array的问题，用bruteforce，N^3 解决，N^2 DP解法。


// 会超时。
class Solution {
    public int numSubarraysWithSum(int[] A, int S) {
        int[] dp = new int[A.length];
        int count = A[0] == S ? 1 : 0;
        for (int len = 1; len <= A.length; len++) {
            int[] nextDp = new int[A.length];
            for (int i = len-1; i < A.length; i++) {
                if (i > 0 && dp[i-1] + A[i] == S) {
                    count++;
                }
                nextDp[i] = (i > 0 ? dp[i-1] : 0) + A[i];
            }
            dp = nextDp;
        }
        return count;
    }
}

// 这一题应该会有更好的解法，因为限制了输入只能 0或者1. 用Sliding window做。
// Window 展开的条件是，sum不足S，只要后面还有0，都可以继续扩张。前面的0，乘以后面的0，加1，就是这一组1组成的S可以组成最大的
// LC 给的解法1，就是按照我这个思路，但是还要分别处理当S=0的时候，非常麻烦，不建议FB面试用这个方法。


// Sub array，涉及到Sum，最经典的还是prefix Sum的解法。Sum(i,j) = Sum(0,i) - Sum(0,j-1)
class Solution {
    public int numSubarraysWithSum(int[] A, int S) {
        int[] prefixSums = new int[A.length];
        int pre = 0;
        for (int i = 0; i < A.length; i++) {
            prefixSums[i] = pre + A[i];
            pre = prefixSums[i];
        }
        Map<Integer, Integer> sumToCount = new HashMap<>();
        sumToCount.put(0, 1);
        int count = 0;
        for (int prefixSum : prefixSums) {
        // 一开始这里搞错了，弄成了 S - prefixSum, 仔细看上面的方程，是Sum(i,j) = Sum(0,i) - Sum(0,j-1)
        // 这里因为加了（0，1）, 所以不用判断prefixSum == S的情况，也就是Sum(0,i) == S的情况，这里用Map无法体现。
            count += sumToCount.getOrDefault(prefixSum - S, 0);
            sumToCount.put(prefixSum, sumToCount.getOrDefault(prefixSum, 0) + 1);
        }
        return count;
    }
}

