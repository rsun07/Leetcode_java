// 这道题做过很多遍，这一次2021年2月初，用Google jamboard 画图，第一次的想法还是有一点奇怪的。

class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        if (target > nums[nums.length-1] && target < nums[0]) {
            return -1;
        }
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] >= nums[0]) {
                if (target > nums[mid] || target < nums[mid] && target < nums[0]) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            } else {
                if (target < nums[mid] || target > nums[mid] && target >= nums[0]) {
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            }
        }
        return -1;
    }
}


// 其实上面想复杂了。根据下面的，就是看num[mid]和nums[0]的关系，先确定mid的位置，然后根据已知有序的这一半，来判断。下面的跟上面的比，其实相当于，最里面的一层if else。上面把更复杂的if写出来了，下面用的是简单的那一半的if。
// 特别要注意区分mid，nums[mid]， target的关系。尤其是注意题目要你返回index还是num
class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        if (target > nums[nums.length-1] && target < nums[0]) {
            return -1;
        }
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] >= nums[0]) {
                if (target >= nums[0] && target < nums[mid]) {
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[nums.length - 1]) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
        }
        return -1;
    }
}