// facebook常考题。有一个易错点，就是lo有可能出界，当输入是[1,2] 让找3的时候，lo最后会停在index 2

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[]{-1, -1};
        }
        int first = searchFirst(nums, target);
        if (first == -1) {
            return new int[]{-1, -1};
        }
        return new int[]{first, searchLast(nums, target)};
    }
    
    private int searchFirst(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            if (nums[mid] < target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return lo < nums.length && nums[lo] == target ? lo : -1;
    }
    
    private int searchLast(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            if (nums[mid] <= target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return hi;
    }
}

// 简化后
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[]{-1, -1};
        }
        int first = searchIndex(nums, target, false);
        if (first >= nums.length || nums[first] != target) {
            return new int[]{-1, -1};
        }
        return new int[]{first, searchIndex(nums, target, true)};
    }
    
    private int searchIndex(int[] nums, int target, boolean searchLast) {
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            if (nums[mid] < target || searchLast && nums[mid] == target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return searchLast ? hi : lo;
    }
}