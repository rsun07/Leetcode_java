// 看到 只需要返回一个int，就想到DP。DP(i), 以i截止的最长的valid substring。这个跟一般的DP有点不同，DP(i) 不是长度为i或者i+1时候最优解，只是一个local解。最优解需要另一个全局变量来维持。
// 特别注意这种情况，()(())，最前面的两个容易被忽略
class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() < 2) {
            return 0;
        }
        int maxLen = 0;
        int[] dp = new int[s.length()];
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                continue;
            }
            if (s.charAt(i) == ')') {
                if (s.charAt(i-1) == '(') {
                    dp[i] = 2;
                    if (i >= 2) {
                        dp[i] += dp[i-2];
                    }
                } else {
                    // char at i-1 is ')'
                    if (i > dp[i-1] && s.charAt(i - 1 - dp[i-1]) == '(') {
                        dp[i] += dp[i-1] + 2;
                        // ()(())
                        if (i - 1 - dp[i-1] - 1 >= 0) {
                            dp[i] += dp[i-1-dp[i-1]-1];
                        }
                    }
                }
            }
            maxLen = Math.max(maxLen, dp[i]);
        }
        return maxLen;
    }
}


// 非DP解法，用一个Stack
// 特别注意这种情况，()(())，最前面的两个容易被忽略
class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() < 2) {
            return 0;
        }
        int maxLen = 0;
        int[] localMax = new int[s.length()];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else if (!stack.isEmpty()) {
                int openIndex = stack.pop();
                localMax[i] = i - openIndex + 1;
                if (openIndex > 0) {
                    localMax[i] += localMax[openIndex-1];
                }
                maxLen = Math.max(maxLen, localMax[i]);
            }
        }
        return maxLen;
    }
}

// 下面是LC的答案，非常巧妙，很难想到。'('的index在stack里，永远出现在')'之后，在stack里有'('的index的前提下，是不可能把更后面的')'的index push进去的。能够把')'的index push进去的前提一定是stack里已经没有'('的index了。虽然行得通，但是非常难解释，估计是在某一个更加合理的逻辑下写出了代码，

public class Solution {

    public int longestValidParentheses(String s) {
        int maxans = 0;
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                stack.pop();
                if (stack.empty()) {
                    stack.push(i);
                } else {
                    maxans = Math.max(maxans, i - stack.peek());
                }
            }
        }
        return maxans;
    }
}


// 以上都是2020年的解法。2021年2月初，写下了如下的解法
class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() < 2) {
            return 0;
        }
        int[] dp = new int[s.length()];
        int maxLen = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == '(') continue;
            // assume input is always valid
            if (s.charAt(i-1) == '(') {
                dp[i] = (i >= 2 ? dp[i-2] : 0) + 2;
            }
            if (dp[i-1] > 0 && i > dp[i-1] && s.charAt(i-dp[i-1]-1) == '(') {
                dp[i] = dp[i-1] + 2;
                // 还要把之前的再续上 ()((()))，易错点。
                if (i-dp[i-1]-2 > 0) {
                    dp[i] += dp[i-dp[i-1]-2];
                }
            }
            maxLen = Math.max(maxLen, dp[i]);
        }
        return maxLen;
    }
}

// 用stack做，思路借鉴那一题，22. Generate Parentheses。如何算作是合法的空格长串？当左边比右边多的时候，目前有的左右对，都是合法的。当右边比左边总数多的时候，此时就是非法的，合法的一个串结束，重头开始统计。我没怎么看答案，但是想到Stack是往里面push index，大概可以想到，只push open的index，遇到close的时候计算长度即可。

// 错误的code，没有考虑到()()。要把前面的续上，没有那么神奇。
class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() < 2) {
            return 0;
        }
        int maxLen = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                if (!stack.isEmpty()) {
                    int j = stack.pop();
                    maxLen = Math.max(maxLen, i-j+1);
                }
            }
        }
        return maxLen;
    }
}

// 还错，()(()
class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() < 2) {
            return 0;
        }
        int maxLen = 0, localMaxLen = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                if (!stack.isEmpty()) {
                    int j = stack.pop();
                    localMaxLen += 2;
                    maxLen = Math.max(maxLen, localMaxLen);
                } else {
                    localMaxLen = 0;
                }
            }
        }
        return maxLen;
    }
}

