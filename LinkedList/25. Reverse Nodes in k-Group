// 这一题呢，如果纯暴力用链表特性做，也可以做。我一直是这么做的。

// 这也算的经典的题目，就是翻转链表的中间一段，怎么做。需要存头，存尾。然后把下一个放到头的下一个来。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummyHead = new ListNode(), start = dummyHead;
        dummyHead.next = head;
        while (head != null) {
            ListNode node = head;
            for (int i = 0; i < k; i++) {
                if (node == null) {
                    return dummyHead.next;
                }
                node = node.next;
            }
            ListNode end = node, pre = head, nextStart = head;
            node = head.next;
            head.next = end;
            while (node != end) {
                ListNode next = node.next;
                start.next = node;
                node.next = pre;
                pre = node;
                node = next;
            }
            start = nextStart;
            head = end;
        }
        return dummyHead.next;
    }
}


// 递归的方法做
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode node = head;
        for (int i = 0; i < k; i++) {
            if (node == null) {
                return head;
            }
            node = node.next;
        }
        ListNode reverseHead = reverseList(head, node);
        // head这时候变成了最后一个，它的下一个是下一个reverseHead
        head.next = reverseKGroup(node, k);
        return reverseHead;
    }
    
    private ListNode reverseList(ListNode head, ListNode end) {
        ListNode pre = null; 
        while (head != end) {
            ListNode next = head.next;
            head.next = pre;
            pre = head;
            head = next;
        }
        return pre;
    }
}