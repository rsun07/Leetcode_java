/* 

付费题，FB题

Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.

If the list is empty (i.e., given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.

 

Example 1:


 
Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.



Example 2:

Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.
Example 3:

Input: head = [1], insertVal = 0
Output: [1,0]
 

Constraints:

0 <= Number of Nodes <= 5 * 10^4
-10^6 <= Node.val <= 10^6
-10^6 <= insertVal <= 10^6
*/


/*
特别易错，注意以下几种情况
[3,3,5]
0

[3,4,1]
2

[3,5,1]
0

[]
1

[1]
2

总的来说，有三种情况。
第一种，就是，最普遍的，val在链表的两个node之间，这种直接插入就行了。
第二种，val小于链表中的最小值，或者大于链表中的最大值。这种情况，就需要找到最大和最小，然后插入在它们中间。
第三种，链表中的所优数字都相等，其实跟第二种是一样的解法。
*/



/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _next) {
        val = _val;
        next = _next;
    }
};
*/

class Solution {
    public Node insert(Node head, int insertVal) {
        if (head == null) {
            Node newNode = new Node(insertVal);
            newNode.next = newNode;
            return newNode;
        }
        Node pre = head, node = head.next, max = pre, min = node;
        do {
            if (insertVal > pre.val && insertVal <= node.val) {
                return insert(pre, node, insertVal);
            } 
            pre = node;
            node = node.next;
            if (pre.val > node.val) {
                max = pre;
                min = node;
            }
        } while (node != head.next);
        return insert(max, min, insertVal);
    }
    
    private Node insert(Node pre, Node cur, int insertVal) {
            Node newNode = new Node(insertVal);
            pre.next = newNode;
            newNode.next = cur;
            return newNode;
    }
}