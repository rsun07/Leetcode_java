// 这一题比较难，20分钟写完很难。

// 这是我写的第二版，第一版是想先整个过一遍，排除一些肯定不可能的，但是这样会变得很麻烦也很易错，面试的时候，最好不要这样写。因为这样并不能降低时间复杂度。最好就是直接按照第二版下面这种，利用好String的各种方法。
// 这里有一个知识点，就是String的split方法，可以传一个limit，这个limit如果是正数，就意味着只拆成n个substring，比如 "1.1.1.1.1".split("\\.", 2); => [1,1.1.1.1]。如果是负数，则会打印出无数多。负数和不加limit的区别在于，".1.1..1.".split("\\.") => [,1, 1, , 1]；".1.1..1.".split("\\.", -1) => [, 1, 1, , 1, ] 最后一个有没有抓到。这一点在下面的判断里很关键。


class Solution {
    public String validIPAddress(String IP) {
        if (validIPv4(IP)) {
            return "IPv4";
        }
        if (validIPv6(IP)) {
            return "IPv6";
        }
        return "Neither";
    }
    
    private boolean validIPv4(String IP) {
        String[] parts = IP.split("\\.", -1);
        if (parts.length != 4) return false;
        for (String part : parts) {
            if (part.length() == 0 || part.length() > 3) return false;
            if (part.charAt(0) == '0' && part.length() > 1) return false;
            int num = 0;
            for (char c : part.toCharArray()) {
                if (c < '0' || c > '9') return false;
                int digit = Character.getNumericValue(c);
                num = num * 10 + digit;
            }
            if (num > 255) return false;
        }
        return true;
    }
    
    private boolean validIPv6(String IP) {
        String[] parts = IP.split(":", -1);
        if (parts.length != 8) return false;
        for (String part : parts) {
            if (part.length() == 0 || part.length() > 4) return false;
            for (char c : part.toCharArray()) {
                if (!(c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F')) return false;
            }
        }
       return true;
    }
}

// 考察正则表达式，这个是很难的，网上有一个段子，就说，入职谷歌第一年，搜索email正则表达式，入职第五年，还是搜索。

import java.util.regex.Pattern;
class Solution {
  String chunkIPv4 = "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
  Pattern pattenIPv4 =
          Pattern.compile("^(" + chunkIPv4 + "\\.){3}" + chunkIPv4 + "$");

  String chunkIPv6 = "([0-9a-fA-F]{1,4})";
  Pattern pattenIPv6 =
          Pattern.compile("^(" + chunkIPv6 + "\\:){7}" + chunkIPv6 + "$");

  public String validIPAddress(String IP) {
    if (pattenIPv4.matcher(IP).matches()) return "IPv4";
    return (pattenIPv6.matcher(IP).matches()) ? "IPv6" : "Neither";
  }
}


// 投机取巧但是过不了测试条件 "01.01.01.01"

import java.net.*;
class Solution {
  public String validIPAddress(String IP) {
    try {
      return (InetAddress.getByName(IP) instanceof Inet6Address) ? "IPv6": "IPv4";
    } catch(Exception e) {}
    return "Neither";
  }
}