// Topological Sort
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            if (!graph.containsKey(preCourse)) {
                graph.put(preCourse, new ArrayList<>());
            }
            graph.get(preCourse).add(course);
            indegrees[course]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                count++;
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int course = queue.poll();
            for (int nextCourse : graph.getOrDefault(course, Collections.emptyList())) {
                // if it's smaller than 0, it means it's already in the queue or already finished BFS
                if (--indegrees[nextCourse] == 0) {
                    count++;
                    queue.offer(nextCourse);
                }
            }
        }
        return numCourses == count;
    }
}


// 用DFS倒过来
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        boolean[] hasPrereq = new boolean[numCourses];
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            hasPrereq[course] = true;
            if (!graph.containsKey(preCourse)) {
                graph.put(preCourse, new ArrayList<>());
            }
            graph.get(preCourse).add(course);
        }
        boolean[] visited = new boolean[numCourses], visiting = new boolean[numCourses];
        Stack<Integer> stack = new Stack<>();

        int count = 0;
        // DFS cycle detect
        // here, each node starts an DFS, it's not a generic DFS. Another way to find DFS start points is to have a boolean array, find those courses that doin't have prerequest
        for (int i = 0; i < numCourses; i++) {
            if (!hasPrereq[i]) {
                stack.push(i);
            }
        }
        // all courses has pre request, which means no start point, no course can be taken initially
        // Must add this check before the while loop, otherwise it will skip the while loop and return true at the last line.
        if (stack.isEmpty()) {
            return false;
        }

        while (!stack.isEmpty()) {
            int course = stack.pop();
            if (visited[course]) {
                continue;
            }
            // When pop the visiting node here, meaning finished all it's subsedences, DFS finished for this node
            // Or this node is pop first time, however, no more DFS to go
            if (visiting[course] || !graph.containsKey(course)) {
                visiting[course] = false;
                visited[course] = true;
                count++;
            } else {
                // push it back as a sign of this node's DFS finish. Or we can use stack.peek() above to avoid this push back. Then we need pop it when visited and visiting it.
                stack.push(course);
                visiting[course] = true;
                // graph must contains key course here
                for (int nextCourse : graph.get(course)) {
                    if (visiting[nextCourse]) {
                        return false;
                    }
                    if (!visited[nextCourse]) {
                        stack.push(nextCourse);
                    }
                }
            }
        }
        return count == numCourses;
    }
}