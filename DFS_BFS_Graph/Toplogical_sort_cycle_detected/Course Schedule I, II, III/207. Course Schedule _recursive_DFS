// 其实这道题，可以抽象成检测有向图是否有环。因为只要有环，在环上的课程就不可能上。如果没有环，那么一定可以上完所有课。为什么？画画图就知道。
// 有向图找环，用DFS做，BFS很难，因为BFS很难track，现在的node是从哪里来的。DFS每次都是一条链往下走，visited碰到不算，因为在题目里说明已经上完了这门课，在DFS里面，visited说明该Node的DFS已经在走这个链之前就走完了，也就是说两条链有交集，但是没有环。如果是visiting的，说明该node又回到了path上的某一个点，说明有环。

// 本以为多加一些判断，会更快，没想到变慢了
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            if (!graph.containsKey(preCourse)) {
                graph.put(preCourse, new ArrayList<>());
            }
            graph.get(preCourse).add(course);
        }
        boolean[] visited = new boolean[numCourses], visiting = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] || !graph.containsKey(i)) {
                continue;
            }
            if (hasCycle(i, graph, visited, visiting)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean hasCycle(int course, Map<Integer, List<Integer>> graph, boolean[] visited, boolean[] visiting) {
        if (visited[course]) {
            return false;
        }
        if (visiting[course]) {
            return true;
        }
        visiting[course] = true;
        for (int nextCourse : graph.getOrDefault(course, Collections.emptyList())) {
            if (visited[nextCourse]) continue;
            if (visiting[nextCourse]) return true;
            if (hasCycle(nextCourse, graph, visited, visiting)) {
                return true;
            }
        }
        visiting[course] = false;
        visited[course] = true;
        return false;
    }
}


class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses < 2) {
            return true;
        } 
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            if (!graph.containsKey(course)) {
                graph.put(course, new ArrayList<>());
            }
            graph.get(course).add(preCourse);
        }
        
        boolean[] visited = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (hasCycle(i, graph, visited, new boolean[numCourses])) 
                return false;
        }
        return true;
    }
    
    private boolean hasCycle(int course, Map<Integer, List<Integer>> graph, boolean[] visited, boolean[] visiting) {
        if (visited[course]) return false;
        if (visiting[course]) return true;
        visiting[course] = true;
        for (int preCourse : graph.getOrDefault(course, Collections.emptyList())) {
            if (hasCycle(preCourse, graph, visited, visiting)) {
                return true;
            }
        }
        visiting[course] = false;
        visited[course] = true;
        return false;
    }
}