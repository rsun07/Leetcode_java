// 其实这道题，可以抽象成检测有向图是否有环。因为只要有环，在环上的课程就不可能上。如果没有环，那么一定可以上完所有课。为什么？画画图就知道。
// 有向图找环，用DFS做，BFS很难，因为BFS很难track，现在的node是从哪里来的。DFS每次都是一条链往下走，visited碰到不算，因为在题目里说明已经上完了这门课，在DFS里面，visited说明该Node的DFS已经在走这个链之前就走完了，也就是说两条链有交集，但是没有环。如果是visiting的，说明该node又回到了path上的某一个点，说明有环。
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            if (!graph.containsKey(preCourse)) {
                graph.put(preCourse, new ArrayList<>());
            }
            graph.get(preCourse).add(course);
        }
        boolean[] visited = new boolean[numCourses];
        
        // DFS cycle detect
        // here, each node starts an DFS, it's not a generic DFS. Another way to find DFS start points is to have a boolean array, find those courses that doin't have prerequest
        for (int i = 0; i < numCourses; i++) {
            if (visited[i]) {
                continue;
            }
            Stack<Integer> stack = new Stack<>();
            stack.push(i);
            boolean[] visiting = new boolean[numCourses];
            while (!stack.isEmpty()) {
                int course = stack.pop();
                if (visited[course]) {
                    continue;
                }
                // When pop the visiting node here, meaning finished all it's subsedences, DFS finished for this node
                // Or this node is pop first time, however, no more DFS to go
                if (visiting[course] || !graph.containsKey(course)) {
                    visiting[course] = false;
                    visited[course] = true;
                } else {
                    // push it back as a sign of this node's DFS finish. Or we can use stack.peek() above to avoid this push back. Then we need pop it when visited and visiting it.
                    stack.push(course);
                    visiting[course] = true;
                    // graph must contains key course here
                    for (int nextCourse : graph.get(course)) {
                        if (visiting[nextCourse]) {
                            return false;
                        }
                        if (!visited[nextCourse]) {
                            stack.push(nextCourse);
                        }
                    }
                }
            }
        }
        return true;
    }
}

// 写法更简洁一些，但是更慢
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            int course = prereq[0], preCourse = prereq[1];
            if (!graph.containsKey(preCourse)) {
                graph.put(preCourse, new ArrayList<>());
            }
            graph.get(preCourse).add(course);
        }
        boolean[] visited = new boolean[numCourses], visiting = new boolean[numCourses];
        Stack<Integer> stack = new Stack<>();

        // DFS cycle detect
        // here, each node starts an DFS, it's not a generic DFS. Another way to find DFS start points is to have a boolean array, find those courses that doin't have prerequest
        for (int i = 0; i < numCourses; i++) {
            stack.push(i);
        }

        while (!stack.isEmpty()) {
            int course = stack.pop();
            if (visited[course]) {
                continue;
            }
            // When pop the visiting node here, meaning finished all it's subsedences, DFS finished for this node
            // Or this node is pop first time, however, no more DFS to go
            if (visiting[course] || !graph.containsKey(course)) {
                visiting[course] = false;
                visited[course] = true;
            } else {
                // push it back as a sign of this node's DFS finish. Or we can use stack.peek() above to avoid this push back. Then we need pop it when visited and visiting it.
                stack.push(course);
                visiting[course] = true;
                // graph must contains key course here
                for (int nextCourse : graph.get(course)) {
                    if (visiting[nextCourse]) {
                        return false;
                    }
                    if (!visited[nextCourse]) {
                        stack.push(nextCourse);
                    }
                }
            }
        }
        return true;
    }
}