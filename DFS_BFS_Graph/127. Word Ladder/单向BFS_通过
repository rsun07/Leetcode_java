// Leetcode的答案中给出了一个新的思路，就是提前构建一个graph的关系。提前把一个word到另一个word的链接构建好。run time 降低到了175ms
// 做word ladder II的时候，发现一个问题，有可能重复把word加到queue里面，优化后，时间减少为89ms
class Solution {        
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // though it says this never happen, still need to check incase
        if (beginWord.equals(endWord)) {
            return 1;
        }
        int len = 2;
        Map<String, List<String>> transfers = buildGraph(beginWord, wordList);
        Set<String> visited = new HashSet<>();
        // BFS
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                // 把visited改到下面，可以避免加重复的String到queue里面，可以减少一半左右的run time。注意，这样一来，就要在while循环外面，把beginWord改成visited
                visited.add(word);
                for (String nextWord : transfers.get(word)) {
                    // here now, nextWord must be in wordList
                    if (endWord.equals(nextWord)) {
                        return len;
                    }
                    if (!visited.contains(nextWord)) {
                        queue.offer(nextWord);
                    }
                }
            }
            len++;
        }
        return 0;
    }
    
    // here we use List rather than Set, because we don't need to check contains, so List is faster as Set need to calcualte hash
    private Map<String, List<String>> buildGraph(String beginWord, List<String> wordList) {
        Map<String, List<String>> transfers = new HashMap<>();
        // adding beginWord to the list could make code easier, but it will build some unnecessary link. e.g. word in wordList to beginWord
        Set<String> wordSet = new HashSet<>();
        for (String word : wordList) {
            wordSet.add(word);
        }
        transfers.put(beginWord, getAdjList(beginWord, wordSet));
        for (String word : wordList) {
            transfers.put(word, getAdjList(word, wordSet));
        }
        return transfers;
    }
    
    private List<String> getAdjList(String word, Set<String> wordSet) {
        char[] chars = word.toCharArray();
        List<String> adjList = new ArrayList<>();
        for (int j = 0; j < chars.length; j++) {
            char originChar = chars[j];
            for (char c = 'a'; c <= 'z'; c++) {
                if (c == originChar) {
                    continue;
                }
                chars[j] = c;
                String newWord = String.valueOf(chars);
                if (wordSet.contains(newWord)) {
                    adjList.add(newWord);
                }
            }
            chars[j] = originChar;
        }
        return adjList;
    }
}

// 跟上面类似，就是用另一种build graph的方法， 用的是遍历list而不是char转换的方法
class Solution {        
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // though it says this never happen, still need to check incase
        if (beginWord.equals(endWord)) {
            return 1;
        }
        int len = 2;
        Map<String, List<String>> transfers = buildGraph(beginWord, wordList);
        Set<String> visited = new HashSet<>();
        // BFS
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                visited.add(word);
                for (String nextWord : transfers.get(word)) {
                    // here now, nextWord must be in wordList
                    if (endWord.equals(nextWord)) {
                        return len;
                    }
                    if (!visited.contains(nextWord)) {
                        queue.offer(nextWord);
                    }
                }
            }
            len++;
        }
        return 0;
    }
    
    // here we use List rather than Set, because we don't need to check contains, so List is faster as Set need to calcualte hash
    private Map<String, List<String>> buildGraph(String beginWord, List<String> wordList) {
        Map<String, List<String>> transfers = new HashMap<>();
        // adding beginWord to the list could make code easier, but it will build some unnecessary link. e.g. word in wordList to beginWord
        transfers.put(beginWord, getAdjList(beginWord, wordList));
        for (String word : wordList) {
            transfers.put(word, getAdjList(word, wordList));
        }
        return transfers;
    }
    
    private List<String> getAdjList(String word, List<String> wordList) {
        List<String> adjList = new ArrayList<>();
        for (String nextWord : wordList) {
            if (isValidTransfer(word, nextWord)) {
                adjList.add(nextWord);
            }
        }
        return adjList;
    }
    
    private boolean isValidTransfer(String w1, String w2) {
        int diff = 0;
        for (int i = 0; i < w1.length() && diff < 2; i++) {
            if (w1.charAt(i) != w2.charAt(i)) {
                diff++;
            }
        }
        return diff == 1;
    }
}


// Leetcode答案里面提供的方法，另一种建立graph的方法，用*代表pattern，这样的话run time只需要35ms。Leetcode答案里面是用substring + 的办法，我这里用char[]的办法，答案需要43ms，我比他快
class Solution {        
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // though it says this never happen, still need to check incase
        if (beginWord.equals(endWord)) {
            return 1;
        }
        int len = 2;
        Map<String, List<String>> patternToWords = new HashMap<>();
        setPatternToWords(beginWord, patternToWords);
        for (String word : wordList) {
            setPatternToWords(word, patternToWords);
        }
        Set<String> visited = new HashSet<>();
        // BFS
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        visited.add(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                char[] chars = queue.poll().toCharArray();
                for (int j = 0; j < chars.length; j++) {
                    char originChar = chars[j];
                    chars[j] = '*';
                    String pattern = String.valueOf(chars);
                    if (patternToWords.containsKey(pattern)) {
                        for (String nextWord : patternToWords.get(pattern)) {
                            if (endWord.equals(nextWord)) {
                                return len;
                            }
                            if (!visited.contains(nextWord)) {
                                visited.add(nextWord);
                                queue.offer(nextWord);
                            }
                        }
                    }
                    chars[j] = originChar;
                }
            }
            len++;
        }
        return 0;
    }
    
    private void setPatternToWords(String word, Map<String, List<String>> patternToWords) {
        char[] chars = word.toCharArray();
        for (int j = 0; j < chars.length; j++) {
            char originChar = chars[j];
            chars[j] = '*';
            String pattern = String.valueOf(chars);
            if (!patternToWords.containsKey(pattern)) {
                patternToWords.put(pattern, new ArrayList<>());
            }
            patternToWords.get(pattern).add(word);
            chars[j] = originChar;
        }
    }
}


// 基于上面的再优化了一下，时间到了26ms。2021年1月9日，43个test cases
class Solution {        
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // though it says this never happen, still need to check incase
        if (beginWord.equals(endWord)) {
            return 1;
        }
        int len = 2;
        Map<String, List<String>> patternToWords = new HashMap<>();
        setPatternToWords(beginWord, patternToWords);
        for (String word : wordList) {
            setPatternToWords(word, patternToWords);
        }
        Set<String> visited = new HashSet<>();
        // BFS
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        visited.add(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                List<String> patterns = getAllPatterns(queue.poll());
                for (String pattern : patterns) {
                    for (String nextWord : patternToWords.getOrDefault(pattern, Collections.emptyList())) {
                        if (endWord.equals(nextWord)) {
                            return len;
                        }
                        if (!visited.contains(nextWord)) {
                            visited.add(nextWord);
                            queue.offer(nextWord);
                        }
                    }
                }
            }
            len++;
        }
        return 0;
    }
    
    private void setPatternToWords(String word, Map<String, List<String>> patternToWords) {
        List<String> patterns = getAllPatterns(word);
        for (String pattern : patterns) {
            if (!patternToWords.containsKey(pattern)) {
                patternToWords.put(pattern, new ArrayList<>());
            }
            patternToWords.get(pattern).add(word);
        }
    }
    
    private List<String> getAllPatterns(String word) {
        List<String> res = new ArrayList<>();
        char[] chars = word.toCharArray();
        for (int j = 0; j < chars.length; j++) {
            char originChar = chars[j];
            chars[j] = '*';
            res.add(String.valueOf(chars));
            chars[j] = originChar;
        }
        return res;
    }
}