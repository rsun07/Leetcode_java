// 根据单向BFS改进后的结果，仍然超时
class Solution {
    
    private int minLen;
    private Map<String, List<String>> transfers;
        
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // max is using all the words in wordList (endWord must included in wordList), so 1 + wordList.size()
        this.minLen = wordList.size() + 2;
        this.transfers = buildGraph(beginWord, wordList);
        dfs(beginWord, endWord, new HashSet<String>());
        return minLen > wordList.size() + 1 ? 0 : minLen;
    }
    
    private void dfs(String word, String target, Set<String> path) {
        if (word.equals(target)) {
            minLen = Math.min(minLen, path.size() + 1);
            return;
        }
        path.add(word);
        for (String nextWord : transfers.get(word)) {
            if (!path.contains(nextWord)) {
                dfs(nextWord, target, path);
            }
        }
        path.remove(word);
    }
    
    // here we use List rather than Set, because we don't need to check contains, so List is faster as Set need to calcualte hash
    private Map<String, List<String>> buildGraph(String beginWord, List<String> wordList) {
        Map<String, List<String>> transfers = new HashMap<>();
        // adding beginWord to the list could make code easier, but it will build some unnecessary link. e.g. word in wordList to beginWord
        Set<String> wordSet = new HashSet<>(), visited = new HashSet<>();
        for (String word : wordList) {
            wordSet.add(word);
        }
        transfers.put(beginWord, getAdjList(beginWord, wordSet));
        for (String word : wordList) {
            transfers.put(word, getAdjList(word, wordSet));
        }
        return transfers;
    }
    
    private List<String> getAdjList(String word, Set<String> wordSet) {
        char[] chars = word.toCharArray();
        List<String> adjList = new ArrayList<>();
        for (int j = 0; j < chars.length; j++) {
            char originChar = chars[j];
            for (char c = 'a'; c <= 'z'; c++) {
                if (c == originChar) {
                    continue;
                }
                chars[j] = c;
                String newWord = String.valueOf(chars);
                if (wordSet.contains(newWord)) {
                    adjList.add(newWord);
                }
            }
            chars[j] = originChar;
        }
        return adjList;
    }
}