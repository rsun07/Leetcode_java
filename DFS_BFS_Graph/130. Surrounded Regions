// 错误的做法。错在哪里呢？不能在DFS的途中对'O'进行变换，因为如果是两个相邻的'O'，visited不论你是设成true or false，都是假的。假设visited一律设成true，得到某一个点是surrounded，然而实际上，其中一个true可能只是因为是其他的visited，而并不是真的被包围，可能可以突围。

class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        int n = board.length, m = board[0].length;
        Boolean[][] isSurrounded = new Boolean[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if(board[i][j] == 'O') {
                    isSurrounded(board, i, j, n, m, isSurrounded);
                }
            }
        }
    }
    
    private boolean isSurrounded(char[][] board, int i, int j, int n, int m, Boolean[][] isSurrounded) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length) {
            return false;
        }
        if (board[i][j] == 'X') {
            return true;
        }
        if (isSurrounded[i][j] != null) {
            return isSurrounded[i][j];
        }
        // temporarry set to true to avoid loop
        isSurrounded[i][j] = true;
        boolean curIsSurrounded = 
        isSurrounded(board, i+1, j, n, m, isSurrounded)
            && isSurrounded(board, i-1, j, n, m, isSurrounded)
            && isSurrounded(board, i, j+1, n, m, isSurrounded)
            && isSurrounded(board, i, j-1, n, m, isSurrounded);
        if (curIsSurrounded) {
            board[i][j] = 'X';
        } else {
            isSurrounded[i][j] = false;
        }
        return curIsSurrounded;
    }
}

// 纠正了上面的错误，只在最终结果得到后更改'O'的值，结果会超时，因为最差的情况需要在每一个'O'都做DFS. 关键还是在于，不能一次更新整个DFS的链，造成很多重复的DFS。

class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        int n = board.length, m = board[0].length;
        Boolean[][] isSurrounded = new Boolean[n][m];
        boolean[][] visited = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if(board[i][j] == 'O') {
                    boolean isCurSurrounded = isSurrounded(board, i, j, n, m, visited, isSurrounded);
                    if (isCurSurrounded) {
                        board[i][j] = 'X';
                        isSurrounded[i][j] = true;
                    } else {
                        isSurrounded[i][j] = false;
                    }
                }
            }
        }
    }
    
    private boolean isSurrounded(char[][] board, int i, int j, int n, int m, boolean[][] visited, Boolean[][] isSurrounded) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length) {
            return false;
        }
        if (board[i][j] == 'X' || visited[i][j]) {
            return true;
        }
        if (isSurrounded[i][j] != null) {
            return isSurrounded[i][j];
        }
        visited[i][j] = true;
        boolean isCurSurrounded = isSurrounded(board, i+1, j, n, m, visited, isSurrounded)
            && isSurrounded(board, i-1, j, n, m, visited, isSurrounded)
            && isSurrounded(board, i, j+1, n, m, visited, isSurrounded)
            && isSurrounded(board, i, j-1, n, m, visited, isSurrounded);
        visited[i][j] = false;
        return isCurSurrounded;
    }
}

// 由外到内的解法
class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        int n = board.length, m = board[0].length;
        boolean[][] notSurrounded = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            markNotSurrounded(board, i, 0, notSurrounded);
            markNotSurrounded(board, i, m-1, notSurrounded);
        }
        for (int j = 0; j < m; j++) {
            markNotSurrounded(board, 0, j, notSurrounded);
            markNotSurrounded(board, n-1, j, notSurrounded);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'O' && !notSurrounded[i][j]) {
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void markNotSurrounded(char[][] board, int i, int j, boolean[][] notSurrounded) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length || board[i][j] == 'X' || notSurrounded[i][j]) {
            return;
        }
        notSurrounded[i][j] = true;
        markNotSurrounded(board, i+1, j, notSurrounded);
        markNotSurrounded(board, i-1, j, notSurrounded);
        markNotSurrounded(board, i, j+1, notSurrounded);
        markNotSurrounded(board, i, j-1, notSurrounded);
    }
}

// 节约空间和时间的解法
class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        int n = board.length, m = board[0].length;
        for (int i = 0; i < n; i++) {
            markNotSurrounded(board, i, 0);
            markNotSurrounded(board, i, m-1);
        }
        for (int j = 0; j < m; j++) {
            markNotSurrounded(board, 0, j);
            markNotSurrounded(board, n-1, j);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == 'Y') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    private void markNotSurrounded(char[][] board, int i, int j) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length || board[i][j] == 'X' || board[i][j] == 'Y') {
            return;
        }
        board[i][j] = 'Y';
        markNotSurrounded(board, i+1, j);
        markNotSurrounded(board, i-1, j);
        markNotSurrounded(board, i, j+1);
        markNotSurrounded(board, i, j-1);
    }
}