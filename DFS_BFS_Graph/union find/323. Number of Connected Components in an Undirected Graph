// 付费题， Union Find 基础
/*
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

Output: 2
Example 2:

Input: n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

     0           4
     |           |
     1 --- 2 --- 3

Output:  1
Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.
*/


// Quick Find 的解法
class Solution {
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] edge : edges) {
            uf.union(edge[0], edge[1]);
        }
        return uf.getCount();
    }
}

class UnionFind {
    
    int count;
    int[] parent;
    
    public UnionFind(int n) {
        this.count = n;
        this.parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    public boolean isConnected(int p, int q) {
        if (parent[p] == parent[q]) return true;
        return false;
    }
    
    public int getCount() {
        return count;
    }
    
    public void union(int p, int q) {
        if (isConnected(p, q)) return;
        int val = parent[q];
        for (int i = 0; i < parent.length; i++) {
            if (parent[i] == val) {
                parent[i] = parent[p];
            }
        }
        count--;
    }
}


// Quick Union 写法

// 错误的写法。错在哪里呢？假设先1merge到0，然后等一下1和2merge的时候，按照这种写法，可能1又会merge到2，这样0和2之间没有关系。而实际上，0和2之间应该也要在同一个union里面。

class Solution {
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] edge : edges) {
            uf.union(edge[0], edge[1]);
        }
        return uf.getCount();
    }
}

class UnionFind {
    
    int count;
    int[] parent;
    
    public UnionFind(int n) {
        this.count = n;
        this.parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    private int root(int i) {
        while (i != parent[i]) {
            i = parent[i];
        }
        return i;
    }
    
    public boolean isConnected(int p, int q) {
        if (root(p) == root(q)) return true;
        return false;
    }
    
    public int getCount() {
        return count;
    }
    
    public void union(int p, int q) {
        if (isConnected(p, q)) return;
        parent[q] = parent[p];
        count--;
    }
}


//  正确的解法
class Solution {
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] edge : edges) {
            uf.union(edge[0], edge[1]);
        }
        return uf.getCount();
    }
}

class UnionFind {
    
    int count;
    int[] parent;
    
    public UnionFind(int n) {
        this.count = n;
        this.parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    private int root(int i) {
        while (i != parent[i]) {
            i = parent[i];
        }
        return i;
    }
    
    public boolean isConnected(int p, int q) {
        if (root(p) == root(q)) return true;
        return false;
    }
    
    public int getCount() {
        return count;
    }
    
    public void union(int p, int q) {
        int i = root(p), j = root(q);
        // 因为本题要count，所以已经union的必须提前终止后面的count--
        if (i == j) return;
        parent[i] = j;
        count--;
    }
}


// 普林斯顿 weighted 解法。优化，非常快。可以把树给拉平
class Solution {
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] edge : edges) {
            uf.union(edge[0], edge[1]);
        }
        return uf.getCount();
    }
}

class UnionFind {
    
    int count;
    int[] id;
    
    public UnionFind(int n) {
        this.count = n;
        this.id = new int[n];
        for (int i = 0; i < n; i++) {
            id[i] = i;
        }
    }
    
    private int root(int i) {
        while (i != id[i]) {
        	// 关键的拉平操作，把一整棵树拉平。这里的意义是，把id[i]里的值，移动的离root更进一步
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
    
    public boolean isConnected(int p, int q) {
        if (root(p) == root(q)) return true;
        return false;
    }
    
    public int getCount() {
        return count;
    }
    
    public void union(int p, int q) {
        int i = root(p), j = root(q);
        // 因为本题要count，所以已经union的必须提前终止后面的count--
        if (i == j) return;
        id[i] = j;
        count--;
    }
}


// 有一个size array的做法。leetcode上面的
class Solution {
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] edge : edges) {
            uf.union(edge[0], edge[1]);
        }
        return uf.getCount();
    }
}

class UnionFind {
    
    int count;
    int[] id;
    int[] size;
    
    public UnionFind(int n) {
        this.count = n;
        this.id = new int[n];
        this.size = new int[n];
        for (int i = 0; i < n; i++) {
            id[i] = i;
            size[i] = 1;
        }
    }
    
    private int root(int i) {
        while (i != id[i]) {
            i = id[i];
        }
        return i;
    }
    
    public boolean isConnected(int p, int q) {
        if (root(p) == root(q)) return true;
        return false;
    }
    
    public int getCount() {
        return count;
    }
    
    public void union(int p, int q) {
        int rootP = root(p), rootQ = root(q);
        if (rootP == rootQ) return;
        // merge size small to large
        if (size[rootP] > size[rootQ]) {
            id[rootQ] = rootP;
            size[rootP] += size[rootQ];
        } else {
            id[rootP] = rootQ;
            size[rootQ] += size[rootP];
        }
        count--;
    }
}
